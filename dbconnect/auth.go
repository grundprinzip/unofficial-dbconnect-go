package dbconnect

import (
	"context"
	"github.com/databricks/databricks-sdk-go/config"
	"google.golang.org/grpc/credentials"
	"net/http"
)

// unifiedAuthCredentials is a struct that implements the PerRPCCredentials interface. This
// interface is needed to support per RPC credentials for authentication
type unifiedAuthCredentials struct {
	credentials.PerRPCCredentials
	config *config.Config
}

// GetRequestMetadata is a method that is used to get the request metadata for the GRPC connection.
// During the invocation of this method, the SDK will authenticate the request and return the headers
// that are needed for the connection. The headers are generated by calling the Authenticate method of the
// unified auth configuration from the Databricks SDK for Go.
func (u *unifiedAuthCredentials) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {
	req := http.Request{Header: make(http.Header)}
	// Generate the headers needed for the connections. This will automatically make
	// sure that the proper tokens are used and refreshed if needed.
	err := u.config.Authenticate(&req)
	if err != nil {
		return nil, err
	}

	result := make(map[string]string)
	for k, _ := range req.Header {
		result[k] = req.Header.Get(k)
	}
	return result, nil
}

// RequireTransportSecurity is a method that is used to determine if the transport security is required.
func (u *unifiedAuthCredentials) RequireTransportSecurity() bool {
	return true
}

// newUnifiedAuthCredentials is a method that is used to create a new instance of the unified auth credentials.
func newUnifiedAuthCredentials(cfg *config.Config) credentials.PerRPCCredentials {
	return &unifiedAuthCredentials{
		config: cfg,
	}
}
